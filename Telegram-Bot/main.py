import db
import scraper as scr

import logging
import gc
from datetime import datetime, timedelta
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile
from aiogram import types, Bot, Dispatcher
from aiogram.types.web_app_info import WebAppInfo
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.utils.markdown import link
import asyncio


TOKEN = "BOT_TOKEN"

storage = MemoryStorage()
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=storage)


# Configure logging
logging.basicConfig(level=logging.INFO)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å WebApp
web_kb = ReplyKeyboardMarkup(resize_keyboard=True, is_persistent=True, keyboard=[[KeyboardButton(text="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ üè°", web_app=WebAppInfo(url="https://search.idlebot.ru"), )]])


@dp.message(Command(commands=["start"]))
async def start(message: types.Message) -> None:
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    registered = await db.register_user(message.from_user.username, message.chat.id)
    if registered:
        await message.answer("üïä –ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç idleBot, –ø—Ä–µ–¥–ª–∞–≥–∞—é –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∂–∏–ª—å—è –ø–æ—Å—É—Ç–æ—á–Ω–æ —Å–æ —Å–∫–∏–¥–∫–æ–π –æ—Ç 3%.\n\n–ü—Ä–æ—Å—Ç–æ –∂–º–∏ üü∞Menu –∏ —Å–Ω–∏–∑—É –∫–Ω–æ–ø–∫—É –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ üè°, —Å–ª–µ–¥—É–π –º–æ–∏–º –ø–æ–¥—Å–∫–∞–∑–∫–∞–º!", reply_markup=ReplyKeyboardRemove())
        await asyncio.sleep(1)
        await message.answer("–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–±–æ –º–Ω–µ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤—ã–±—Ä–∞–≤ –∫–æ–º–∞–Ω–¥—É /help\n–û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É –ø–æ —Ü–µ–Ω–µ *99 —Ä—É–±/–º–µ—Å* (‚òïÔ∏è) –∏ –ø–æ–ª—É—á–∏ –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è!", reply_markup=web_kb)


# –•–µ–Ω–¥–ª–µ—Ä WebApp Data
@dp.message(lambda message: message.web_app_data)
async def message_handler(message: types.message, state: FSMContext) -> None:
    stic = await bot.send_sticker(message.chat.id, "CAACAgIAAxkBAAEGqf1ji1YqGJ5ytJe9sYcrIB0NZIe0vgACeCYAAoOxWEivtM3UgWHuvCsE", reply_markup=ReplyKeyboardRemove())
    await asyncio.sleep(1)
    mes = await message.answer("–ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã...\n–û–∂–∏–¥–∞–Ω–∏–µ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 1 –º–∏–Ω—É—Ç—ã, –Ω–æ –æ–±—ã—á–Ω–æ –º—ã —Å–ø—Ä–∞–≤–ª—è–µ–º—Å—è –µ—â—ë –±—ã—Å—Ç—Ä–µ–µ üí™", reply_markup=ReplyKeyboardRemove())
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebApp
    data = message.web_app_data.data
    # –ü–∞—Ä—Å–∏–Ω–≥
    if data[0] == '!' or data[:5] == 'AVIA!':
        query = str(data).replace('AVIA', '')
        source = await scr.ostrovok_get(query, message.from_user.username)
        await state.update_data(service="–û—Å—Ç—Ä–æ–≤–æ–∫")  # –°–µ—Ä–≤–∏—Å
    else:
        query = str(data).replace('AVIA', '')
        source = await scr.browser_get(query, message.from_user.username)
        await state.update_data(service="–°—É—Ç–æ—á–Ω–æ")  # –°–µ—Ä–≤–∏—Å
    await bot.delete_message(message.chat.id, mes.message_id)
    await bot.delete_message(message.chat.id, stic.message_id)
    if source[0] == 0:  # –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞
        await bot.send_message(718190318, f"@{message.from_user.username} - {source[1]}")
        await message.answer("–ë–∞–∑–∞ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, —á–∏–Ω–∏–º! ‚è∞", reply_markup=ReplyKeyboardRemove())
    elif source[0] == 2:  # –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        await message.answer("–ö–∞–∂–µ—Ç—Å—è, –ø–æ —Ç–≤–æ–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å üò£ –ü–æ–ø—Ä–æ–±—É–π —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã!", reply_markup=web_kb)
    else:
        # –í —Å–ª—É—á–∞–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ - —Å–Ω–∏–∑–∏—Ç—å –ª–∏–º–∏—Ç
        if not (await db.check_payment(message.chat.id)):
            await db.update_limit(message.chat.id, message.from_user.username)
        cards = source[0]
        gc.collect()
        await state.update_data(cards=cards)  # –ö–∞—Ä—Ç–æ—á–∫–∏
        await state.update_data(current=0)  # –¢–µ–∫—É—â–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
        await state.update_data(all=len(cards) - 1)  # –í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –∑–∞–ø—Ä–æ—Å–µ
        inb = InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã  ‚¨á', callback_data='–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã')
        message_text = f"*–ú—ã –Ω–∞—à–ª–∏ –∏ –æ—Ç–æ–±—Ä–∞–ª–∏ –¥–ª—è —Ç–µ–±—è {len(cards)} –ª—É—á—à–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∂–∏–ª—å—è! –ñ–º–∏ ‚¨áÔ∏è*"
        if 'AVIA' in data:
            message_text += "\n\n–ê —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ –Ω–∞–π—Ç–∏ –¥–µ—à–µ–≤—ã–µ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚úàÔ∏è –∏ —Å–ª–µ–¥—É–π –Ω–∞—à–∏–º –ø–æ–¥—Å–∫–∞–∑–∫–∞–º üòâ"
            inb2 = InlineKeyboardButton(text='–ü–æ–∏—Å–∫ –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤  ‚úàÔ∏è', url='https://t.me/IdleAvia_bot')
            inkb = InlineKeyboardMarkup(inline_keyboard=[[inb], [inb2]])
        else:
            inkb = InlineKeyboardMarkup(inline_keyboard=[[inb]])
        await bot.send_message(message.chat.id, message_text, reply_markup=inkb)


@dp.callback_query(lambda call: call.data == "–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã")
async def show_results(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    if len(user_data) != 0:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –±–æ—Ç –≤—ã–∫–ª—é—á–∞–ª—Å—è
        cards = user_data['cards']
        # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å "–ü–æ–∫–∞–∑–∞—Ç—å"
        try:
            await callback_query.message.edit_reply_markup(InlineKeyboardMarkup(inline_keyboard=[[callback_query.message.reply_markup.inline_keyboard[1][0]]]))
        except Exception:
            await callback_query.message.delete_reply_markup()
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        inb1 = InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë  ‚û°', callback_data='–ï—â—ë')
        inb2 = InlineKeyboardButton(text='–ü–æ–¥—Ä–æ–±–Ω–µ–µ', web_app=WebAppInfo(url=cards[0]['url']))
        inb3 = InlineKeyboardButton(text='–ù–∞ –∫–∞—Ä—Ç–µ üìç', callback_data=cards[0]['location'])
        if len(cards) == 1:  # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Å–µ–≥–æ –æ–¥–∏–Ω
            inkb = InlineKeyboardMarkup(inline_keyboard=[[inb2], [inb3]])
        else:
            inkb = InlineKeyboardMarkup(inline_keyboard=[[inb2], [inb3, inb1]])
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
        object_link = link('–ò—Å—Ç–æ—á–Ω–∏–∫ ‚Üó', cards[0]['url'])
        if user_data['service'] == '–û—Å—Ç—Ä–æ–≤–æ–∫':
            stars = '‚≠ê' * cards[0]['star']
            if stars != '': stars += '\n'
            text = stars + '*' + cards[0]['name'] + '*' + '\n\n' + '\n'.join(cards[0]['rooms']) + '\n\nüìç `' + cards[0]['address'] + '`\n\n' + object_link + '\n_‚Ñπ –ì–∞—Ä–∞–Ω—Ç–∏—è –∫—ç—à–±—ç–∫–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –±—Ä–æ–Ω–∏ –ø–æ —Å—Å—ã–ª–∫–µ!_'
        else:
            text = cards[0]['info'] + '\n' + '*' + cards[0]['name'] + '*\n\n' + cards[0]['atrs'] + '\n' + 'üìç `' + cards[0]['address'] + '`\n\n' + '*' + cards[0]['price'] + '* –≤ —Å—É—Ç–∫–∏ ' + cards[0]['rate'] + ' ' + cards[0]['count'] + '\n\n' + object_link + '\n_‚Ñπ –ì–∞—Ä–∞–Ω—Ç–∏—è –∫—ç—à–±—ç–∫–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –±—Ä–æ–Ω–∏ –ø–æ —Å—Å—ã–ª–∫–µ!_'
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ
        await callback_query.answer(text="–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏...")
        try:
            if len(cards[0]['photo']) > 0:
                photo = await scr.collage(cards[0]['photo'])
            else:
                photo = FSInputFile(f"./Pictures/Error.jpg")
        except Exception as e:  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ - –∑–∞–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ
            print(e)
            photo = FSInputFile(f"./Pictures/Error.jpg")
        # –û—Ç–ø—Ä–∞–≤–∫–∞
        await bot.send_photo(callback_query.message.chat.id, photo, text, reply_markup=inkb)
        await state.update_data(current=1)
    else:
        await callback_query.message.delete_reply_markup()


@dp.callback_query(lambda call: call.data == "–ï—â—ë")  # –ü–æ—Å–ª–µ–¥—É—é—â–∏–π –ø–æ–∏—Å–∫
async def show_results(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    if len(user_data) != 0:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –±–æ—Ç –≤—ã–∫–ª—é—á–∞–ª—Å—è
        cards = user_data['cards']
        num = user_data['current']
        # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ï—â—ë"
        await callback_query.message.edit_reply_markup(InlineKeyboardMarkup(inline_keyboard=[[callback_query.message.reply_markup.inline_keyboard[0][0]]]))
        if num < user_data['all']:  # –ï—Å–ª–∏ –Ω–µ –∫–æ–Ω–µ—Ü
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
            inb1 = InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë  ‚û°', callback_data='–ï—â—ë')
            inb2 = InlineKeyboardButton(text='–ü–æ–¥—Ä–æ–±–Ω–µ–µ', web_app=WebAppInfo(url=cards[num]['url']))
            inb3 = InlineKeyboardButton(text='–ù–∞ –∫–∞—Ä—Ç–µ üìç', callback_data=cards[num]['location'])
            inkb = InlineKeyboardMarkup(inline_keyboard=[[inb2], [inb3, inb1]])
        else:  # –†–µ–∞–ª—å–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            inb2 = InlineKeyboardButton(text='–ü–æ–¥—Ä–æ–±–Ω–µ–µ', web_app=WebAppInfo(url=cards[num]['url']))
            inb3 = InlineKeyboardButton(text='–ù–∞ –∫–∞—Ä—Ç–µ üìç', callback_data=cards[num]['location'])
            inkb = InlineKeyboardMarkup(inline_keyboard=[[inb2], [inb3]])
            # –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤ –∫–∞—Ä—Ç–æ—á–µ–∫
            await state.update_data(cards=[])
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
        object_link = link('–ò—Å—Ç–æ—á–Ω–∏–∫ ‚Üó', cards[num]['url'])
        if user_data['service'] == '–û—Å—Ç—Ä–æ–≤–æ–∫':
            stars = '‚≠ê' * cards[num]['star']
            if stars != '': stars += '\n'
            text = stars + '*' + cards[num]['name'] + '*' + '\n\n' + '\n'.join(cards[num]['rooms']) + '\n\nüìç `' + cards[num]['address'] + '`\n\n' + object_link + '\n_‚Ñπ –ì–∞—Ä–∞–Ω—Ç–∏—è –∫—ç—à–±—ç–∫–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –±—Ä–æ–Ω–∏ –ø–æ —Å—Å—ã–ª–∫–µ!_'
        else:
            text = cards[num]['info'] + '\n' + '*' + cards[num]['name'] + '*\n\n' + cards[num]['atrs'] + '\n' + 'üìç `' + cards[num]['address'] + '`\n\n' + '*' + cards[num]['price'] + '* –≤ —Å—É—Ç–∫–∏ ' + cards[num]['rate'] + ' ' + cards[num]['count'] + '\n\n' + object_link + '\n_‚Ñπ –ì–∞—Ä–∞–Ω—Ç–∏—è –∫—ç—à–±—ç–∫–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –±—Ä–æ–Ω–∏ –ø–æ —Å—Å—ã–ª–∫–µ!_'
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ
        await callback_query.answer(text="–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏...")
        try:
            if len(cards[num]['photo']) > 0:
                photo = await scr.collage(cards[num]['photo'])
            else:
                photo = FSInputFile(f"./Pictures/Error.jpg")
        except Exception:  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ - –∑–∞–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ
            photo = FSInputFile(f"./Pictures/Error.jpg")
        # –û—Ç–ø—Ä–∞–≤–∫–∞
        await bot.send_photo(callback_query.message.chat.id, photo, text, reply_markup=inkb)
        await state.update_data(current=num + 1)
    else:
        await callback_query.message.edit_reply_markup(InlineKeyboardMarkup(inline_keyboard=[[callback_query.message.reply_markup.inline_keyboard[0][0]]]))


@dp.callback_query(lambda call: "–°—É—Ç@" in call.data)
async def location_sut(callback_query: types.CallbackQuery):
    result = scr.find_place(callback_query.data.split('@')[1])
    if result[0]:
        await callback_query.message.answer_location(result[1], result[2])
    try:
        await callback_query.message.edit_reply_markup(InlineKeyboardMarkup(inline_keyboard=[[callback_query.message.reply_markup.inline_keyboard[0][0]], [callback_query.message.reply_markup.inline_keyboard[1][1]]]))
    except Exception:
        await callback_query.message.edit_reply_markup(InlineKeyboardMarkup(inline_keyboard=[[callback_query.message.reply_markup.inline_keyboard[0][0]]]))
    await callback_query.answer()


@dp.callback_query(lambda call: "–û—Å—Ç@" in call.data)
async def location_ost(callback_query: types.CallbackQuery):
    await callback_query.message.answer_location(float(callback_query.data.split('@')[1]), float(callback_query.data.split('@')[2]))
    try:
        await callback_query.message.edit_reply_markup(InlineKeyboardMarkup(inline_keyboard=[[callback_query.message.reply_markup.inline_keyboard[0][0]], [callback_query.message.reply_markup.inline_keyboard[1][1]]]))
    except Exception:
        await callback_query.message.edit_reply_markup(InlineKeyboardMarkup(inline_keyboard=[[callback_query.message.reply_markup.inline_keyboard[0][0]]]))
    await callback_query.answer()


@dp.callback_query(lambda call: call.data == "–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
async def show(callback_query: types.CallbackQuery):
    await callback_query.message.edit_reply_markup(InlineKeyboardMarkup(inline_keyboard=[[callback_query.message.reply_markup.inline_keyboard[0][0]]]))
    await callback_query.message.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üôá")
    await callback_query.answer()


@dp.message(Command(commands=["search"]))
async def search(message: types.Message) -> None:
    if not (await db.check_payment(message.chat.id)) and not (await db.check_limit(message.chat.id)):
        await message.answer("*–£—Ñ—Ñ... –ö–∞–∂–µ—Ç—Å—è, –ª–∏–º–∏—Ç —Ç–≤–æ–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–æ—Å—Ç–∏–≥–Ω—É—Ç* ü§í\n\n–ù–∞–∂–º–∏ /subscribe –∏ –ø–æ–¥–∫–ª—é—á–∏ –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∫ –Ω–∞–º –∑–∞–≤—Ç—Ä–∞!\n\n_* –ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ 3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å_", reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É *¬´–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ üè°¬ª*", reply_markup=web_kb)


@dp.message(Command(commands=["help"]))
async def help_com(message: types.Message) -> None:
    await message.answer("–í *idleBot* ‚ù§Ô∏è –í—ã —Å–º–æ–∂–µ—Ç–µ –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –∂–∏–ª—å—ë –ø–æ—Å—É—Ç–æ—á–Ω–æ, —Å –ø–æ–º–æ—â—å—é —É–¥–æ–±–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤—ã–±–∏—Ä–∞—Ç—å –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è —Å –ø—Ä–∏—è—Ç–Ω–æ–π —Å–∫–∏–¥–∫–æ–π –¥–ª—è –≤–∞—Å!\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n\n/search  ‚Äî  üîé –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫\n/subscribe  ‚Äî  üéÅ –ü–æ–¥–ø–∏—Å–∫–∞\n/help  ‚Äî  ‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –±–æ—Ç–µ\n/cashback  ‚Äî  üí∏ –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∫–µ—à–±—ç–∫ 5%", reply_markup=ReplyKeyboardRemove())


@dp.message(Command(commands=["cashback"]))
async def gift(message: types.Message) -> None:
    await message.answer("–ü—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏ –∏–∑ –±–æ—Ç–∞ –Ω–∞–º –∑–∞—á–∏—Å–ª—è–µ—Ç—Å—è –∫–æ–º–∏—Å—Å–∏—è. –ú—ã –ø–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å–≥–∏ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ *–≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–±—ç–∫ 5%* —É–¥–æ–±–Ω—ã–º –≤–∞–º —Å–ø–æ—Å–æ–±–æ–º.\n\n–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ —Å –Ω–∞–º–∏ @igorstar77 üí∏", reply_markup=ReplyKeyboardRemove())


PRICE = types.LabeledPrice(label='–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ IdleBot', amount=9900)


@dp.message(Command(commands=["subscribe"]))
async def subscribe(message: types.Message) -> None:
    checking = await db.check_payment(message.chat.id)
    if checking:
        current = await db.get_payment(message.chat.id)
        subs = f"*–æ–ø–ª–∞—á–µ–Ω–æ –¥–æ {current}* ‚úÖ"
        limit = '‚ôæ'
    else:
        limit = await db.get_limit(message.chat.id)
        subs = "*–Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç* ‚ùå"
    await message.answer("–í –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ –±–æ—Ç –¥–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–µ–ª–∞—Ç—å 3 –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–∞ –≤ –¥–µ–Ω—å.\n\n*–ü–æ–¥–∫–ª—é—á–∏–≤ –µ–∂–µ–º–µ—Å—è—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ IdleBot, —Ç—ã —Å–º–æ–∂–µ—à—å —Å–º–æ—Ç—Ä–µ—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—ã –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π ‚ö°\n–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ 99 —Ä—É–±./–º–µ—Å (–¥–µ—à–µ–≤–ª–µ —á–µ–º —Ö–æ—Ä–æ—à–∏–π –∫–æ—Ñ–µ ‚òïÔ∏è). –ü—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫–∞—è –∂–µ —Å—É–º–º–∞ –≤–µ—Ä–Ω–µ—Ç—Å—è —Ç–µ–±–µ —Å –∫–µ—à–±—ç–∫–æ–º —Å –ø–µ—Ä–≤–æ–π –∂–µ –±—Ä–æ–Ω–∏.*\n\n–° –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –ø–æ–∏—Å–∫–æ–º –±—É–¥–µ—Ç –ø—Ä–æ—â–µ:\n‚ù§Ô∏è –ù–∞—Ö–æ–¥–∏—Ç—å –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã\n‚ù§Ô∏è –û–±—Å—É–∂–¥–∞—Ç—å –≤—ã–±–æ—Ä –≤–º–µ—Å—Ç–µ —Å–æ —Å–≤–æ–µ–π –∫–æ–º–ø–∞–Ω–∏–µ–π –ø—Ä—è–º–æ –≤ –¢–µ–ª–µ–≥—Ä–∞–º\n‚ù§Ô∏è –•—Ä–∞–Ω–∏—Ç—å –ª—é–±–∏–º—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ Media –∞—Ä—Ö–∏–≤–µ –≤ –±–æ—Ç–µ")
    await asyncio.sleep(1)
    await message.answer(f"–°—Ç–∞—Ç—É—Å —Ç–≤–æ–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: {subs}\n–û—Å—Ç–∞—Ç–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å: {limit}", reply_markup=ReplyKeyboardRemove())
    if not checking:
        await asyncio.sleep(1)
        dto = (datetime.now() + timedelta(30)).strftime("%Y-%m-%d")
        await bot.send_invoice(
            message.chat.id,
            title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ IdleBot",
            description=f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.\n–ë—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ {dto} –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ.",
            provider_token="PROVIDER_TOKEN",
            currency='rub',
            is_flexible=False,
            prices=[PRICE],
            payload='PAYLOAD'
        )


@dp.pre_checkout_query(lambda query: True)
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@dp.message(lambda message: message.successful_payment)
async def process_successful_payment(message: types.message):
    await db.update_payment(message.chat.id)
    curdata = await db.get_payment(message.chat.id)
    await bot.send_message(message.chat.id, "*–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ*\n–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç —Ç–µ–±—è –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É üôè", reply_markup=ReplyKeyboardRemove())
    await asyncio.sleep(1)
    await bot.send_message(message.chat.id, f"–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—ã –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π. –¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –¥–æ *{curdata}* –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ ‚ö°")


@dp.message(lambda message: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ üè°' in message.text)
async def help_mes2(message: types.message):
    if await db.check_payment(message.chat.id) or await db.check_limit(message.chat.id):
        await message.answer("‚ùó –ß—Ç–æ–±—ã –±–æ—Ç —Ä–∞–±–æ—Ç–∞–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∫–ª—é—á–∏—Å—å –Ω–∞ *Z*-–≤–µ—Ä—Å–∏—é _Telegram Web_ (–¢–µ–ª–µ–≥—Ä–∞–º –≤ –±—Ä–∞—É–∑–µ—Ä–µ) –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞", reply_markup=web_kb)
        await asyncio.sleep(1)
        z_link = link('—Å—Å—ã–ª–∫–µ', 'https://web.telegram.org/z/')
        await message.answer(f"–≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –Ω–∞–∂–∞–≤ –Ω–∞ *‚â°* —Å–≤–µ—Ä—Ö—É —Å–ª–µ–≤–∞ –∏ –≤—ã–±—Ä–∞–≤ –æ–ø—Ü–∏—é *¬´Switch to Z version¬ª*\n–∏–ª–∏ –ø–æ {z_link}", reply_markup=web_kb)


@dp.message()
async def help_mes(message: types.Message) -> None:
    if await db.check_payment(message.chat.id) or await db.check_limit(message.chat.id):
        await message.answer("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫, –æ—Ç–∫—Ä–æ–π *= –ú–µ–Ω—é*, –≤—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É /search –∏ –ø–æ—Å–ª–µ - –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É *¬´–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ üè°¬ª* –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞", reply_markup=web_kb)
    else:
        await message.answer("*–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–æ—Å—Ç–∏–≥–Ω—É—Ç* ü§í\n\n–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ 3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å. –£–∑–Ω–∞–π –±–æ–ª—å—à–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ /subscribe –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∫ –Ω–∞–º –∑–∞–≤—Ç—Ä–∞!", reply_markup=ReplyKeyboardRemove())


@dp.shutdown()
async def on_shut():
    print("–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω")


if __name__ == "__main__":
    bot.parse_mode = 'MARKDOWN'
    dp.run_polling(bot)
